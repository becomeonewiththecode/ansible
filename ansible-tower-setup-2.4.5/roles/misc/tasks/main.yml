---

- name: If Ansible does not provide a system UUID, get a random one.
  script: random_uuid.py
  connection: local
  sudo: no
  when: ansible_product_uuid.lower() in ('', 'na')
  register: system_uuid
  changed_when: False

- name: Write a ha.conf file to /etc/tower that contains the system UUID.
  template:
    dest: /etc/tower/conf.d/ha.py
    force: no
    mode: '0640'
    group: '{{ aw_user }}'
    owner: '{{ aw_user }}'
    src: ha.py

- name: Register the primary instance in the database.
  shell: tower-manage register_instance --{{ primacy }} --hostname="{{ inventory_hostname }}"
  args:
    executable: /bin/bash
  sudo_user: '{{ aw_user }}'
  sudo: True
  register: register_instance
  changed_when: "'changed: True' in register_instance.stdout"
  when: primacy == 'primary'

- name: Register the secondary instances in the database.
  shell: tower-manage register_instance --{{ primacy }} --hostname="{{ inventory_hostname }}"
  args:
    executable: /bin/bash
  sudo_user: '{{ aw_user }}'
  sudo: True
  register: register_instance
  changed_when: "'changed: True' in register_instance.stdout"
  when: primacy == 'secondary'

- name: Determine whether MongoDB should be running.
  shell: tower-manage uses_mongo --local
  changed_when: no
  ignore_errors: yes
  register: result

- name: Stop MongoDB if it is not needed.
  service:
    name: mongod
    state: stopped
    enabled: no
  when: result.rc == 1

- name: Start MongoDB if it is needed
  service:
    name: mongod
    state: started
    enabled: yes
  when: result.rc == 0

- name: Create the default organization if it is needed.
  shell: tower-manage create_default_org
  register: cdo
  changed_when: "'added' in cdo.stdout"
  when: primacy == 'primary'
