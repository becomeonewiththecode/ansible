---
- include_vars: '{{ item }}'
  with_first_found:
    - files:
        - '{{ ansible_distribution }}-{{ ansible_distribution_version }}.yml'           # Ubuntu-12.04, Ubuntu-14.04
        - '{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml'     # Ubuntu-12, Ubuntu-14
        - '{{ ansible_distribution }}.yml'                                              # Ubuntu
        - 'default.yml'
      paths: '../../packages_el/vars'
  when: ansible_os_family.lower() == 'redhat'

- name: Stop Web Services (RH)
  service:
    name: httpd
    state: stopped
  when: ansible_distribution in ["CentOS","RedHat"]

- name: Stop Web Services (Ubuntu)
  service:
    name: apache2
    state: stopped
  when: ansible_distribution in ["Ubuntu"]

- name: Include supervisor variables.
  include_vars: '{{ ansible_os_family }}.yml'

- name: Stop supervisor
  service:
    name: '{{ sup_init_name }}'
    state: stopped

- name: Detect if the Tower database exists
  command: psql postgres -tAc "select 1 from pg_database where datname = '{{pg_database}}'"
  sudo: true
  sudo_user: postgres
  ignore_errors: true
  register: pg_database_exists
  failed_when: pg_database_exists.stdout != '1'
  changed_when: false

- name: Detect if we need to backup and restore the Tower database
  set_fact:
    tower_needs_database_upgrade: database == 'internal' and not pg_database_exists|failed

- name: Create a directory for a database backup to live.
  file:
    path: /var/pg_backups/tower/
    group: postgres
    mode: 0755
    owner: postgres
    state: directory
  when: tower_needs_database_upgrade

- name: Perform a PostgreSQL dump (for backup).
  shell: pg_dumpall > /var/pg_backups/tower/tower-backup.db
  args:
    creates: /var/pg_backups/tower/tower-backup.db
  sudo: True
  sudo_user: postgres
  when: tower_needs_database_upgrade

- name: Stop PostgreSQL.
  service:
    name: postgresql
    state: stopped
  ignore_errors: yes

- name: Uninstall the existing version of PostgreSQL (Red Hat).
  yum:
    name: '{{ item }}'
    state: absent
  with_items:
    - postgresql
    - postgresql-libs
    - postgresql-server
  when: ansible_os_family.lower() == 'redhat'

- name: Uninstall the existing version of PostgreSQL (Ubuntu).
  apt:
    pkg: '{{ item }}'
    state: absent
    force: yes
  with_items:
    - postgresql
    - postgresql-9.1
    - postgresql-client-9.1
    - postgresql-server-dev-9.1
    - postgresql-9.3
    - postgresql-client-9.3
    - postgresql-server-dev-9.3
  when: ansible_os_family.lower() == 'debian'
